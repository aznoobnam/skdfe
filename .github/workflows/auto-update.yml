name: Auto-update Soul Knight Data

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'  # every day at 03:00 UTC

permissions:
  contents: write

jobs:
  update-data:
    runs-on: windows-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3
      with:
        persist-credentials: true

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Set up .NET 6 Runtime
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'

    - name: Install Python deps
      run: pip install requests

    - id: check_version
      shell: python
      run: |
        import json, requests, re
    
        # Load old version
        with open('version.json', 'r') as f:
            old = json.load(f).get('version', '')
    
        # Fetch latest version
        resp = requests.get("http://www.chillyroom.com/zh", timeout=15)
        m = re.search(
            r"https://apk\.chillyroom\.com/apks/[\w\d.\-]+/SoulKnight-release-chillyroom-([\w\d.\-]+)\.apk",
            resp.text
        )
        if not m:
            raise SystemExit("::error::Could not detect latest APK version")
    
        new = m.group(1)
        run_update = new != old
    
        # Write outputs
        with open(os.environ["GITHUB_OUTPUT"], "a") as out:
            out.write(f"new_version={new}\n")
            out.write(f"old_version={old}\n")
            out.write(f"run_update={'true' if run_update else 'false'}\n")
    - name: Report status
      if: always()
      run: |
        echo "Old version: ${{ steps.check_version.outputs.old }}"
        echo "New version: ${{ steps.check_version.outputs.new }}"

    - name: Stop if up to date
      if: ${{ steps.check_version.outputs.run_update == 'false' }}
      run: echo "No update needed, exiting."

    - name: Run data export
      if: ${{ steps.check_version.outputs.run_update == 'true' }}
      run: python skdata.py

    - name: Normalize output filenames
      if: ${{ steps.check_version.outputs.run_update == 'true' }}
      run: |
        mv I2language_${{ steps.check_version.outputs.new_version }}.csv  I2language.csv
        mv Allinfo_${{ steps.check_version.outputs.new_version }}.txt     Allinfo.txt

    - name: Write new version.json
      if: ${{ steps.check_version.outputs.run_update == 'true' }}
      run: |
        echo "{\"version\":\"${{ steps.check_version.outputs.new }}\"}" > version.json

    - name: Commit & push updated data
      if: ${{ steps.check_version.outputs.run_update == 'true' }}
      run: |
        git config user.name  "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add I2language.csv Allinfo.txt version.json
        git commit -m "Updated to ${{ steps.check_version.outputs.new }}" || echo "Nothing to commit"
        git push
